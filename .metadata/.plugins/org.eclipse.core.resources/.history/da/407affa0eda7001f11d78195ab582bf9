package com.insurance.controller;

import com.insurance.model.Policy;
import com.insurance.service.PolicyService;

import jakarta.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@RestController
@RequestMapping("/api/policies")
@CrossOrigin(origins = "http://localhost:3000") // Update if the frontend runs on a different port
public class PolicyController {

    @Autowired
    private PolicyService policyService;

    @GetMapping
    public ResponseEntity<List<Policy>> getAllPolicies() {
        return ResponseEntity.ok(policyService.getAllPolicies());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Policy> getPolicyById(@PathVariable Long id) {
        return policyService.getPolicyById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Policy> addPolicy(@RequestBody Policy policy) {
        return ResponseEntity.ok(policyService.addPolicy(policy));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Policy> updatePolicy(@PathVariable Long id, @RequestBody Policy policy) {
        try {
            return ResponseEntity.ok(policyService.updatePolicy(id, policy));
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{policyNumber}")
    public ResponseEntity<Void> deletePolicy(@PathVariable Long policyNumber) {
        try {
            policyService.deletePolicy(policyNumber);  // Assuming this method handles the logic for deletion.
            return ResponseEntity.noContent().build();  // Success - no content, status code 204
        } catch (EntityNotFoundException e) {
            // This is a custom exception you might create if the policy isn't found
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();  // 404 Not Found
        } catch (Exception e) {
            // This will handle any unexpected errors, like database issues, etc.
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();  // 500 Internal Server Error
        }
    }

    
}
